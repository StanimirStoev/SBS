// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SBS.Infrastructure.Data;

#nullable disable

namespace SBS.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221204172234_SeedUnitsCountriesArticlesAddressesContragentsStores")]
    partial class SeedUnitsCountriesArticlesAddressesContragentsStores
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1efc4197-6067-404f-8f6a-83f265237320",
                            ConcurrencyStamp = "79c8f7ca-0e9a-4498-b47d-093a56e4627c",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "73bf8f04b-bc67-43ea-9924-001bf045b149",
                            ConcurrencyStamp = "c2e74bf7-0288-4845-81a5-4b6686803464",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "81762cb3-03ed-415e-a81a-4b73c9fec1fb",
                            RoleId = "1efc4197-6067-404f-8f6a-83f265237320"
                        },
                        new
                        {
                            UserId = "719a59a9-fc15-49be-a5e9-6f1d6f4fdc47",
                            RoleId = "73bf8f04b-bc67-43ea-9924-001bf045b149"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SBS.Infrastructure.Data.Models.Account.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasComment("First Name of ApplicationUser");

                    b.Property<string>("LastName")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasComment("Last Name of ApplicationUser");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "81762cb3-03ed-415e-a81a-4b73c9fec1fb",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e9d7c581-4819-4ce7-86ff-74f8c1a04c08",
                            Email = "alex@mail.com",
                            EmailConfirmed = true,
                            FirstName = "Александър",
                            LastName = "Нацов",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALEX@MAIL.COM",
                            NormalizedUserName = "АЛЕКС",
                            PasswordHash = "AQAAAAEAACcQAAAAEJsmauS61rph446CK5Cby0Nq1y1vCQPXTlnyBGlKZ0fP2PXUM+K0ncB0go5dz0KSHw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "207c5777-19be-4e93-ac1f-304adcaa6a58",
                            TwoFactorEnabled = false,
                            UserName = "Алекс"
                        },
                        new
                        {
                            Id = "719a59a9-fc15-49be-a5e9-6f1d6f4fdc47",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "07d05647-3731-48ff-b82c-a2b4366cf15a",
                            Email = "nikki@mail.com",
                            EmailConfirmed = true,
                            FirstName = "Николета",
                            LastName = "Добрева",
                            LockoutEnabled = false,
                            NormalizedEmail = "NIKKI@MAIL.COM",
                            NormalizedUserName = "НИКИ",
                            PasswordHash = "AQAAAAEAACcQAAAAEJDWnH1ETY4ONfdY77lbsArlFLVEqcLhx/PF2CdOmEN/lnvZWfu3jlEoXv2QzhZnJA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1c33a9ff-0340-41f1-bf75-0e45e34ea4bf",
                            TwoFactorEnabled = false,
                            UserName = "Ники"
                        },
                        new
                        {
                            Id = "64c7e2a2-f704-4515-a294-13fa5e9b28a8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "11114f63-c114-4c4d-8f53-e470c6d0024b",
                            Email = "dido@mail.com",
                            EmailConfirmed = true,
                            FirstName = "Диян",
                            LastName = "Христов",
                            LockoutEnabled = false,
                            NormalizedEmail = "DIDO@MAIL.COM",
                            NormalizedUserName = "ДИДО",
                            PasswordHash = "AQAAAAEAACcQAAAAENRksJBe8ILbQB5cQvxyTUtxCwYbL6XBlM8HRXxkbvuf/rMFhUgXO83pYEC76s4JVQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "999ef65b-c247-4792-b56d-1521517b80d0",
                            TwoFactorEnabled = false,
                            UserName = "Дидо"
                        },
                        new
                        {
                            Id = "c5798b10-2d39-479f-9e29-042ed2562c3f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e2f88de7-a7b2-41cb-a8da-f13703024515",
                            Email = "stefan@mail.com",
                            EmailConfirmed = true,
                            FirstName = "Стефан",
                            LastName = "Великов",
                            LockoutEnabled = false,
                            NormalizedEmail = "STEFAN@MAIL.COM",
                            NormalizedUserName = "ЧЕФО",
                            PasswordHash = "AQAAAAEAACcQAAAAEFL6Q6G4Z5CI1HaTs3JHkA0+7rUt1+nXHvv1ZGhi9R+PaW06pQdkRR3+j/qY2Vj9MQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7fbb349a-578e-4301-a65d-280a53355b23",
                            TwoFactorEnabled = false,
                            UserName = "Чефо"
                        });
                });

            modelBuilder.Entity("SBS.Infrastructure.Data.Models.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Address Identifier");

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasMaxLength(126)
                        .HasColumnType("nvarchar(126)")
                        .HasComment("Address Line 1 of Article");

                    b.Property<string>("AddressLine2")
                        .IsRequired()
                        .HasMaxLength(126)
                        .HasColumnType("nvarchar(126)")
                        .HasComment("Address Line 2 of Article");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("City Identifier");

                    b.Property<Guid?>("ContragentId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Contragent Identifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Country Identifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("Flag for deleted/in use ");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("ContragentId");

                    b.HasIndex("CountryId");

                    b.ToTable("Addresses");

                    b.HasComment("Data for a Address");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bb884490-1ae1-4caf-a4ac-55bf6394bc9d"),
                            AddressLine1 = "526 New Ave.",
                            AddressLine2 = "Brooklyn, NY 11237",
                            CityId = new Guid("6402b8cf-af94-406a-878e-d89db204e082"),
                            ContragentId = new Guid("0625109a-585a-4c4e-be30-5a18b1e311f8"),
                            CountryId = new Guid("30ec83ae-2c10-41ea-999f-78f3d2c0fe2a"),
                            IsActive = true
                        },
                        new
                        {
                            Id = new Guid("eeb8e279-8df5-4eac-b59c-d04e17639ece"),
                            AddressLine1 = "14 Tzar Osvoboditel Blvd.",
                            AddressLine2 = "fl. 1",
                            CityId = new Guid("c0eef3b2-d651-41dc-9525-e1e77d82df54"),
                            CountryId = new Guid("418edfff-63b9-4275-9037-8702ca24085a"),
                            IsActive = true
                        },
                        new
                        {
                            Id = new Guid("283c85c8-0113-48f3-b5c8-3187f9299bf8"),
                            AddressLine1 = "1 Murgash Str.",
                            AddressLine2 = "fl. 2; pl. 3",
                            CityId = new Guid("c0eef3b2-d651-41dc-9525-e1e77d82df54"),
                            ContragentId = new Guid("e9e67ae0-84c7-4279-96fc-bf12baaea7e9"),
                            CountryId = new Guid("418edfff-63b9-4275-9037-8702ca24085a"),
                            IsActive = true
                        },
                        new
                        {
                            Id = new Guid("171840b5-d316-4274-b4ae-4b7b611a8179"),
                            AddressLine1 = "6 Gurko Str.",
                            AddressLine2 = "fl. 1",
                            CityId = new Guid("c0eef3b2-d651-41dc-9525-e1e77d82df54"),
                            CountryId = new Guid("418edfff-63b9-4275-9037-8702ca24085a"),
                            IsActive = true
                        },
                        new
                        {
                            Id = new Guid("68042d85-077e-4383-9c0d-0ffbc3c4fd96"),
                            AddressLine1 = "30 Peshtersko shose Blvd.",
                            AddressLine2 = "fl. 3; pl. 7",
                            CityId = new Guid("5d1c80b6-b785-4676-8b82-ac7fd4015b5e"),
                            ContragentId = new Guid("c85f94df-a849-42b7-a08b-e7ef758dfb43"),
                            CountryId = new Guid("418edfff-63b9-4275-9037-8702ca24085a"),
                            IsActive = true
                        },
                        new
                        {
                            Id = new Guid("0cf17f71-ad5c-461a-8a53-3c1c9616eea2"),
                            AddressLine1 = "12 Blagovest Str.",
                            AddressLine2 = "fl. 1",
                            CityId = new Guid("5d1c80b6-b785-4676-8b82-ac7fd4015b5e"),
                            CountryId = new Guid("418edfff-63b9-4275-9037-8702ca24085a"),
                            IsActive = true
                        });
                });

            modelBuilder.Entity("SBS.Infrastructure.Data.Models.Article", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Article Identifier");

                    b.Property<string>("DeliveryNumber")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasComment("Delivery Number of Article");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasComment("Description of Article");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("Flag for deleted/in use ");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasComment("Model of Article");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasComment("Name of Article");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasComment("Title of Article");

                    b.Property<Guid>("UnitId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unit Identifier");

                    b.HasKey("Id");

                    b.HasIndex("UnitId");

                    b.ToTable("Articles");

                    b.HasComment("Data for a Article");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f8227782-0e7f-4eac-bc87-d0b9ab145250"),
                            DeliveryNumber = "182681",
                            Description = "Black keyboard",
                            IsActive = true,
                            Model = "KC-200",
                            Name = "Keyboard",
                            Title = "USB keyboard",
                            UnitId = new Guid("a96f16ba-b522-4dd9-9ca6-7425fd7044f6")
                        },
                        new
                        {
                            Id = new Guid("6f5d0558-9c9c-4082-84f2-be8bbce62532"),
                            DeliveryNumber = "DSY-MO140",
                            Description = "Mouse Disney Hanna Montana",
                            IsActive = true,
                            Model = "DSY-MO140",
                            Name = "Mouse",
                            Title = "USB mouse",
                            UnitId = new Guid("a96f16ba-b522-4dd9-9ca6-7425fd7044f6")
                        },
                        new
                        {
                            Id = new Guid("2d1c64fc-6628-4ddb-bcd5-164134f35934"),
                            DeliveryNumber = "RJ-45 - 21.99.1331",
                            Description = "Cable RJ-45 to RJ-45",
                            IsActive = true,
                            Model = "RJ-45",
                            Name = "Cable",
                            Title = "Cable RJ-45",
                            UnitId = new Guid("20b0aaca-9283-4486-be89-ed67e515c2e2")
                        });
                });

            modelBuilder.Entity("SBS.Infrastructure.Data.Models.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("City Identifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Country Identifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("Flag for deleted/in use ");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasComment("Name of City");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");

                    b.HasComment("Data for a City");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c0eef3b2-d651-41dc-9525-e1e77d82df54"),
                            CountryId = new Guid("418edfff-63b9-4275-9037-8702ca24085a"),
                            IsActive = true,
                            Name = "Sofia"
                        },
                        new
                        {
                            Id = new Guid("5d1c80b6-b785-4676-8b82-ac7fd4015b5e"),
                            CountryId = new Guid("418edfff-63b9-4275-9037-8702ca24085a"),
                            IsActive = true,
                            Name = "Plovdiv"
                        },
                        new
                        {
                            Id = new Guid("6402b8cf-af94-406a-878e-d89db204e082"),
                            CountryId = new Guid("30ec83ae-2c10-41ea-999f-78f3d2c0fe2a"),
                            IsActive = true,
                            Name = "New York"
                        });
                });

            modelBuilder.Entity("SBS.Infrastructure.Data.Models.Contragent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Contragent Identifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasComment("First Name of Contragent");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("Flag for deleted/in use ");

                    b.Property<bool>("IsClient")
                        .HasColumnType("bit")
                        .HasComment("Flag is the contragent can be client");

                    b.Property<bool>("IsSupplier")
                        .HasColumnType("bit")
                        .HasComment("Flag is the contragent can be supplier");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasComment("Last Name of Contragent");

                    b.Property<string>("VatNumber")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)")
                        .HasComment("Vat Number of Contragent (EGN when private person)");

                    b.HasKey("Id");

                    b.ToTable("Contragents");

                    b.HasComment("Data for a Contragent (Client or Supplier)");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0625109a-585a-4c4e-be30-5a18b1e311f8"),
                            FirstName = "STC ltd.",
                            IsActive = true,
                            IsClient = true,
                            IsSupplier = true,
                            LastName = "Smart Trusted Computers ltd.",
                            VatNumber = "182681ER232"
                        },
                        new
                        {
                            Id = new Guid("c85f94df-a849-42b7-a08b-e7ef758dfb43"),
                            FirstName = "Kassy",
                            IsActive = true,
                            IsClient = true,
                            IsSupplier = false,
                            LastName = "Chandler",
                            VatNumber = "8147822135"
                        },
                        new
                        {
                            Id = new Guid("e9e67ae0-84c7-4279-96fc-bf12baaea7e9"),
                            FirstName = "Adrean",
                            IsActive = true,
                            IsClient = true,
                            IsSupplier = false,
                            LastName = "Vasilev",
                            VatNumber = "9273028735"
                        });
                });

            modelBuilder.Entity("SBS.Infrastructure.Data.Models.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Country Identifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasComment("Code of Country");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("Flag for deleted/in use ");

                    b.Property<bool>("IsEu")
                        .HasColumnType("bit")
                        .HasComment("Flag for EU countries");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasComment("Name of Country");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasComment("Data for a Country");

                    b.HasData(
                        new
                        {
                            Id = new Guid("418edfff-63b9-4275-9037-8702ca24085a"),
                            Code = "BG",
                            IsActive = true,
                            IsEu = true,
                            Name = "Bulgaria"
                        },
                        new
                        {
                            Id = new Guid("afc087c9-1609-4834-b407-e64d47dfef63"),
                            Code = "DE",
                            IsActive = true,
                            IsEu = true,
                            Name = "Germany"
                        },
                        new
                        {
                            Id = new Guid("30ec83ae-2c10-41ea-999f-78f3d2c0fe2a"),
                            Code = "US",
                            IsActive = true,
                            IsEu = false,
                            Name = "United States"
                        });
                });

            modelBuilder.Entity("SBS.Infrastructure.Data.Models.Delivery", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Delivery Identifier");

                    b.Property<Guid>("ContragentId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Contargent (Supplier) Identifier");

                    b.Property<DateTime>("CreateDatetime")
                        .HasColumnType("datetime2")
                        .HasComment("DateTime of creation");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("Flag for deleted/in use ");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit")
                        .HasComment("Flag for confermrd sell ");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Store Identifier");

                    b.HasKey("Id");

                    b.HasIndex("ContragentId");

                    b.HasIndex("StoreId");

                    b.ToTable("Deliveries");

                    b.HasComment("Data for a Delivery");
                });

            modelBuilder.Entity("SBS.Infrastructure.Data.Models.DeliveryDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Delivery Detail Identifier");

                    b.Property<Guid>("ArticleId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Article Identifier");

                    b.Property<Guid>("DeliveryId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Parent Delivery Identifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("Flag for deleted/in use ");

                    b.Property<double>("Price")
                        .HasColumnType("float")
                        .HasComment("Delivered Price");

                    b.Property<double>("Qty")
                        .HasColumnType("float")
                        .HasComment("Delivered Quantity");

                    b.Property<Guid>("UnitId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unit Identifier");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("DeliveryId");

                    b.HasIndex("UnitId");

                    b.ToTable("DeliveryDetails");

                    b.HasComment("Deatails for the Delivery");
                });

            modelBuilder.Entity("SBS.Infrastructure.Data.Models.PartidesInStore", b =>
                {
                    b.Property<Guid>("StoreId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Store Identifier");

                    b.Property<Guid>("DeliveryDetailId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("DeliveryDetail (Partide) Identifier");

                    b.Property<double>("Qty")
                        .HasColumnType("float")
                        .HasComment("Flag for deleted/in use ");

                    b.Property<Guid?>("SellDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("StoreId", "DeliveryDetailId");

                    b.HasIndex("DeliveryDetailId");

                    b.HasIndex("SellDetailId");

                    b.ToTable("PartidesInStores");

                    b.HasComment("Partides quantity in the stores");
                });

            modelBuilder.Entity("SBS.Infrastructure.Data.Models.Sell", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Sell Identifier");

                    b.Property<Guid>("ContragentId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Contargent (Client) Identifier");

                    b.Property<DateTime>("CreateDatetime")
                        .HasColumnType("datetime2")
                        .HasComment("DateTime of creation");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("Flag for deleted/in use ");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Store Identifier");

                    b.HasKey("Id");

                    b.HasIndex("ContragentId");

                    b.HasIndex("StoreId");

                    b.ToTable("Sells");

                    b.HasComment("Data for a Sell");
                });

            modelBuilder.Entity("SBS.Infrastructure.Data.Models.SellDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Sell Detail Identifier");

                    b.Property<Guid>("DeliveryDetailId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("DeliveryDetail Identifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("Flag for deleted/in use ");

                    b.Property<double>("Price")
                        .HasColumnType("float")
                        .HasComment("Sell price");

                    b.Property<double>("Qty")
                        .HasColumnType("float")
                        .HasComment("Quantity to sell");

                    b.Property<Guid>("SellId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Parent Sell Identifier");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Store Sell Identifier");

                    b.Property<Guid>("UnitId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unit Identifier");

                    b.HasKey("Id");

                    b.HasIndex("SellId");

                    b.HasIndex("UnitId");

                    b.HasIndex("StoreId", "DeliveryDetailId");

                    b.ToTable("SellDetails");

                    b.HasComment("Deatails for the Sells");
                });

            modelBuilder.Entity("SBS.Infrastructure.Data.Models.Store", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Store Identifier");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Address Identifier");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasComment("Store Description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("Flag for deleted/in use Store");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasComment("Store Name");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Stores");

                    b.HasComment("Store Data");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c4628027-2999-43b9-9ec4-0fe9df4d3ff2"),
                            AddressId = new Guid("eeb8e279-8df5-4eac-b59c-d04e17639ece"),
                            Description = "Central store for incoming articles",
                            IsActive = true,
                            Name = "Central Store."
                        },
                        new
                        {
                            Id = new Guid("7c105c2a-e381-4586-9a3c-32a5aae96cc3"),
                            AddressId = new Guid("171840b5-d316-4274-b4ae-4b7b611a8179"),
                            Description = "Store for prepared articles to export",
                            IsActive = true,
                            Name = "Export Store"
                        },
                        new
                        {
                            Id = new Guid("e9cbf847-aa4c-4591-b31e-3f7d39ae6389"),
                            AddressId = new Guid("0cf17f71-ad5c-461a-8a53-3c1c9616eea2"),
                            Description = "Central store for Plovdiv",
                            IsActive = true,
                            Name = "Plovdiv Store"
                        });
                });

            modelBuilder.Entity("SBS.Infrastructure.Data.Models.Transfer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Tarnsfer Identifier");

                    b.Property<DateTime>("CreateDatetime")
                        .HasColumnType("datetime2")
                        .HasComment("Tarnsfer Date of creation");

                    b.Property<Guid>("FromStoreId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Tarnsfer source store Identifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("Flag for deleted/in use");

                    b.Property<Guid>("ToStoreId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Tarnsfer destination store Identifier");

                    b.HasKey("Id");

                    b.HasIndex("FromStoreId");

                    b.HasIndex("ToStoreId");

                    b.ToTable("Transfers");

                    b.HasComment("Transfer Data");
                });

            modelBuilder.Entity("SBS.Infrastructure.Data.Models.TransferDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Tarnsfer Detail Identifier");

                    b.Property<Guid>("DeliveryDetailId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Delivery Detail Identifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("Flag for deleted/in use ");

                    b.Property<double>("Qty")
                        .HasColumnType("float")
                        .HasComment("Transfered Quantity");

                    b.Property<Guid>("TransferId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Parent Tarnsfer Identifier");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryDetailId");

                    b.HasIndex("TransferId");

                    b.ToTable("TransferDetails");

                    b.HasComment("Deatails for the Transfers");
                });

            modelBuilder.Entity("SBS.Infrastructure.Data.Models.Unit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unit Identifier");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasComment("Unit Description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("Flag for deleted/in use Units");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasComment("Unit Short Name");

                    b.HasKey("Id");

                    b.ToTable("Units");

                    b.HasComment("Measuring units");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a96f16ba-b522-4dd9-9ca6-7425fd7044f6"),
                            Description = "Pieces",
                            IsActive = true,
                            Name = "pcs"
                        },
                        new
                        {
                            Id = new Guid("20b0aaca-9283-4486-be89-ed67e515c2e2"),
                            Description = "Meters",
                            IsActive = true,
                            Name = "m"
                        },
                        new
                        {
                            Id = new Guid("b830df7a-9bba-44db-bf48-39b2f76881bd"),
                            Description = "Kilograms",
                            IsActive = true,
                            Name = "kg"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SBS.Infrastructure.Data.Models.Account.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SBS.Infrastructure.Data.Models.Account.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SBS.Infrastructure.Data.Models.Account.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SBS.Infrastructure.Data.Models.Account.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SBS.Infrastructure.Data.Models.Address", b =>
                {
                    b.HasOne("SBS.Infrastructure.Data.Models.City", "City")
                        .WithMany("Addresses")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SBS.Infrastructure.Data.Models.Contragent", "Contragent")
                        .WithMany("Addresses")
                        .HasForeignKey("ContragentId");

                    b.HasOne("SBS.Infrastructure.Data.Models.Country", "Country")
                        .WithMany("Addresses")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Contragent");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("SBS.Infrastructure.Data.Models.Article", b =>
                {
                    b.HasOne("SBS.Infrastructure.Data.Models.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("SBS.Infrastructure.Data.Models.City", b =>
                {
                    b.HasOne("SBS.Infrastructure.Data.Models.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("SBS.Infrastructure.Data.Models.Delivery", b =>
                {
                    b.HasOne("SBS.Infrastructure.Data.Models.Contragent", "Contragent")
                        .WithMany()
                        .HasForeignKey("ContragentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SBS.Infrastructure.Data.Models.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contragent");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("SBS.Infrastructure.Data.Models.DeliveryDetail", b =>
                {
                    b.HasOne("SBS.Infrastructure.Data.Models.Article", "Article")
                        .WithMany("Partides")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SBS.Infrastructure.Data.Models.Delivery", "Delivery")
                        .WithMany("Details")
                        .HasForeignKey("DeliveryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SBS.Infrastructure.Data.Models.Unit", "Unit")
                        .WithMany("DeliveryDetails")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Delivery");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("SBS.Infrastructure.Data.Models.PartidesInStore", b =>
                {
                    b.HasOne("SBS.Infrastructure.Data.Models.DeliveryDetail", "DeliveryDetail")
                        .WithMany("PartidesInStores")
                        .HasForeignKey("DeliveryDetailId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SBS.Infrastructure.Data.Models.SellDetail", null)
                        .WithMany("PartidesInStores")
                        .HasForeignKey("SellDetailId");

                    b.HasOne("SBS.Infrastructure.Data.Models.Store", "Store")
                        .WithMany("PartidesInStores")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("DeliveryDetail");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("SBS.Infrastructure.Data.Models.Sell", b =>
                {
                    b.HasOne("SBS.Infrastructure.Data.Models.Contragent", "Contragent")
                        .WithMany()
                        .HasForeignKey("ContragentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SBS.Infrastructure.Data.Models.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contragent");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("SBS.Infrastructure.Data.Models.SellDetail", b =>
                {
                    b.HasOne("SBS.Infrastructure.Data.Models.Sell", "Sell")
                        .WithMany("Details")
                        .HasForeignKey("SellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SBS.Infrastructure.Data.Models.Unit", "Unit")
                        .WithMany("SellDetails")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SBS.Infrastructure.Data.Models.PartidesInStore", "PartidesInStore")
                        .WithMany()
                        .HasForeignKey("StoreId", "DeliveryDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PartidesInStore");

                    b.Navigation("Sell");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("SBS.Infrastructure.Data.Models.Store", b =>
                {
                    b.HasOne("SBS.Infrastructure.Data.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("SBS.Infrastructure.Data.Models.Transfer", b =>
                {
                    b.HasOne("SBS.Infrastructure.Data.Models.Store", "FromStore")
                        .WithMany("TransferStoresFrom")
                        .HasForeignKey("FromStoreId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SBS.Infrastructure.Data.Models.Store", "ToStore")
                        .WithMany("TransferStoresTo")
                        .HasForeignKey("ToStoreId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("FromStore");

                    b.Navigation("ToStore");
                });

            modelBuilder.Entity("SBS.Infrastructure.Data.Models.TransferDetail", b =>
                {
                    b.HasOne("SBS.Infrastructure.Data.Models.DeliveryDetail", "DeliveryDetail")
                        .WithMany()
                        .HasForeignKey("DeliveryDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SBS.Infrastructure.Data.Models.Transfer", "Transfer")
                        .WithMany("Details")
                        .HasForeignKey("TransferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeliveryDetail");

                    b.Navigation("Transfer");
                });

            modelBuilder.Entity("SBS.Infrastructure.Data.Models.Article", b =>
                {
                    b.Navigation("Partides");
                });

            modelBuilder.Entity("SBS.Infrastructure.Data.Models.City", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("SBS.Infrastructure.Data.Models.Contragent", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("SBS.Infrastructure.Data.Models.Country", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Cities");
                });

            modelBuilder.Entity("SBS.Infrastructure.Data.Models.Delivery", b =>
                {
                    b.Navigation("Details");
                });

            modelBuilder.Entity("SBS.Infrastructure.Data.Models.DeliveryDetail", b =>
                {
                    b.Navigation("PartidesInStores");
                });

            modelBuilder.Entity("SBS.Infrastructure.Data.Models.Sell", b =>
                {
                    b.Navigation("Details");
                });

            modelBuilder.Entity("SBS.Infrastructure.Data.Models.SellDetail", b =>
                {
                    b.Navigation("PartidesInStores");
                });

            modelBuilder.Entity("SBS.Infrastructure.Data.Models.Store", b =>
                {
                    b.Navigation("PartidesInStores");

                    b.Navigation("TransferStoresFrom");

                    b.Navigation("TransferStoresTo");
                });

            modelBuilder.Entity("SBS.Infrastructure.Data.Models.Transfer", b =>
                {
                    b.Navigation("Details");
                });

            modelBuilder.Entity("SBS.Infrastructure.Data.Models.Unit", b =>
                {
                    b.Navigation("DeliveryDetails");

                    b.Navigation("SellDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
