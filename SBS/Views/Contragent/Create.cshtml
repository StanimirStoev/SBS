@model SBS.Core.Models.ContragentViewModel

@{
    ViewData["Title"] = "Create";
}

<h1>Create</h1>

<h4>Contragent</h4>
<hr />

<div class="row">
    <div class="col-md-4">
        <form asp-controller="Contragent" asp-action="Create" method="post">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div>
                <label asp-for="FirstName" class="control-label"></label>
                <input asp-for="FirstName" class="form-control" />
                <span asp-validation-for="FirstName" class="text-danger"></span>
            </div>
            <div>
                <label asp-for="LastName" class="control-label"></label>
                <input asp-for="LastName" class="form-control" />
                <span asp-validation-for="LastName" class="text-danger"></span>
            </div>
            <div>
                <label asp-for="VatNumber" class="control-label"></label>
                <input asp-for="VatNumber" class="form-control" />
                <span asp-validation-for="VatNumber" class="text-danger"></span>
            </div>
            <div class="form-group form-check">
                <label class="form-check-label">
                    <input class="form-check-input" asp-for="IsClient" /> @Html.DisplayNameFor(model => model.IsClient)
                </label>
            </div>
            <div class="form-group form-check">
                <label class="form-check-label">
                    <input class="form-check-input" asp-for="IsSupplier" /> @Html.DisplayNameFor(model => model.IsSupplier)
                </label>
            </div>

           <h5>Addresses</h5>

            <table class="table table-bordered" id="addressTable">
                <thead>
                    <tr>
                        <th>
                            Country Name
                        </th>
                        <th>
                            City Name
                        </th>
                        <th>
                            Address Line 1
                        </th>
                        <th>
                            Address Line 2
                        </th>
@*                        <th>
                            <button id="btnAddAddressRow" type="button" class="btn btn-sm btn-secondary visible" onclick="AddItem(this)">Add</button>
                        </th>*@
                    </tr>
                </thead>
                <tbody>
                    @for(int i = 0; i < Model.Addresses.Count; i++)
                    {
                        <tr>
                            <td>
                                @*@Html.DisplayFor(modelItem => item.Country.Name)*@
                                @*<input asp-for="@item.Country.Name" class="form-control"/>*@
                                <select asp-for="@Model.Addresses[i].CountryId" class="form-control" asp-items="ViewBag.CountriesList"></select>
                               @* @Html.EditorFor(m => m.Addresses[i].Country, new{htmlAttributes = new{@class = "form-control"}})*@
                            </td>
                            <td>
                                @*@Html.DisplayFor(modelItem => item.City.Name)*@
                                @*<input asp-for="@item.City.Name" class="form-control" />*@
                                <select asp-for="@Model.Addresses[i].CityId" class="form-control" asp-items="ViewBag.CitiesList"></select>
                                @*@Html.EditorFor(m => m.Addresses[i].City, new{htmlAttributes = new{@class = "form-control"}})*@
                            </td>
                            <td>
                                @*@Html.DisplayFor(modelItem => item.AddressLine1)*@
                                @*  <input asp-for="@item.AddressLine1" class="form-control" />
                                <span asp-validation-for="@item.AddressLine1" class="text-danger"></span>*@
                                @Html.EditorFor(m => m.Addresses[i].AddressLine1, new{htmlAttributes = new{@class = "form-control"}})
                            </td>
                            <td>
                                @*@Html.DisplayFor(modelItem => item.AddressLine2)*@
                                @*<input asp-for="@item.AddressLine2" class="form-control" />
                                <span asp-validation-for="@item.AddressLine2" class="text-danger"></span>*@
                                @Html.EditorFor(m => m.Addresses[i].AddressLine2, new{htmlAttributes = new{@class = "form-control"}})
                            </td>


                            <td>
                                <div class="btn-group">
                                    @*<a asp-controller="Address" asp-action="Edit" asp-route-id="@item.Id" class="btn btn-warning">Edit</a>*@
                                    @*<form asp-controller="Address" asp-action="Delete" method="post">*@
                                        @*<input name="id" type="hidden" value="@item.Id" />*@
                                        @*<button id='btnremove-@item.Id' type="button" class="btn btn-sm btn-danger visible" onclick="DeleteItem(this)">Delete</button>
                                    </form>*@
                                </div>
                            </td>


                        </tr>
                    }
                </tbody>
            </table>

            <div class="form-group btn-group mt-2">
                <input type="submit" value="Create" class="btn btn-primary" />
                <a class="btn btn-secondary" asp-action="Index">Back</a>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        function AddItem(btn) {

            var table;
            table = document.getElementById('AddressTable');
            var rows = table.getElementsByTagName('tr');
            var rowOuterHtml = rows[rows.length - 1].outerHTML;

            var lastRowIdx = rows.lenght - 2;

            var nextRoIdx = eval(lastRowIdx) + 1;

            rowOuterHtml = rowOuterHtml.replaceAll('_' + lastRowIdx + '_', '_' + nextRoIdx + '_');
            rowOuterHtml = rowOuterHtml.replaceAll('[' + lastRowIdx + ']', '[' + nextRoIdx + ']');
            rowOuterHtml = rowOuterHtml.replaceAll('-' + lastRowIdx, '-' + nextRoIdx);

            var newRow = table.insertRow();
            newRow.innerHTML = rowOuterHtml;

            var x = document.getElementsByTagName('INPUT');

            for (var cnt = 0; cnt < x.length; cnt++) {
                if (x[cnt].type == "text" && x[cnt].id.indexOf('_' + nextRoIdx + '_') > 0)
                    x[cnt].value = '';
                else if (x[cnt].type == "number" && x[cnt].id.indexOf('_' + nextRoIdx + '_') > 0)
                    x[cnt].value = 0;
            }
            //rebindValidators();
        }

        function DeleteItem(btn) {
            var table = document.getElementById('AddressTable');
            var rows = table.getElementsByTagName('tr');

            if (rows.length == 2) {
                alert("There must be at least one item!");
                return;
            }

            $(btn).closest('tr').remove();
        }

        function rebindValidators() {
            var $form = $("CreateContragentForm");

            $form.unbind();

            $form.data("validator", null);

            $.validator.unobtrusive.parse($form);

            $form.validate($form.data("unobtrusiveValidation").options);

            window.alert("here");
        }
    </script>
}
